<?xml version="1.0" encoding="UTF-8" ?>
<!--

    Copyright (c) 2017ï½ž2099 Cowave All Rights Reserved.

    For licensing information, please contact: https://www.cowave.com.

    This code is proprietary and confidential.
    Unauthorized copying of this file, via any medium is strictly prohibited.

-->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cowave.sys.admin.api.mapper.SysUserMapper">
    <sql id="userField">
        u.user_id      userId,
        u.user_type    userType,
        u.user_code    userCode,
        u.user_name    userName,
        u.user_account userAccount,
        u.user_sex     userSex,
        u.user_phone   userPhone,
        u.user_email   userEmail,
        u.rank,
        u.user_status  userStatus,
        u.read_only    readOnly,
        u.create_user  createUser,
        u.create_dept  createDept,
        u.create_time  createTime,
        u.update_user  updateUser,
        u.update_dept  updateDept,
        u.update_time  updateTime,
        u.remark
    </sql>

    <resultMap id="userMap" type="com.cowave.sys.model.admin.SysUser">
        <result column="userId"       property="userId"/>
        <result column="userType"     property="userType"/>
        <result column="userCode"     property="userCode"/>
        <result column="userName"     property="userName"/>
        <result column="userAccount"  property="userAccount"/>
        <result column="userPasswd"   property="userPasswd"/>
        <result column="userSex"      property="userSex"/>
        <result column="userPhone"    property="userPhone"/>
        <result column="userEmail"    property="userEmail"/>
        <result column="rank"         property="rank"/>
        <result column="userStatus"   property="userStatus"/>
        <result column="readOnly"     property="readOnly"/>
        <result column="loginIp"      property="loginIp"/>
        <result column="loginTime"    property="loginTime"/>
        <result column="createUser"   property="createUser"/>
        <result column="updateUser"   property="updateUser"/>
        <result column="createDept"   property="createDept"/>
        <result column="updateDept"   property="updateDept"/>
        <result column="createTime"   property="createTime"/>
        <result column="updateTime"   property="updateTime"/>
        <result column="remark"       property="remark"/>
        <collection property="parentList" javaType="list" ofType="com.cowave.sys.model.admin.SysUserParent">
            <result column="p_id"         property="parentId"/>
            <result column="p_code"       property="parentCode"/>
            <result column="p_name"       property="parentName"/>
            <result column="tree_type"    property="treeType"/>
        </collection>
        <collection property="roleList" javaType="list" ofType="com.cowave.sys.model.admin.SysUserRole">
            <result column="role_id"      property="roleId"/>
            <result column="role_code"    property="roleCode"/>
            <result column="role_name"    property="roleName"/>
        </collection>
        <collection property="deptList" javaType="list" ofType="com.cowave.sys.model.admin.SysUserDept">
            <result column="dept_id"      property="deptId"/>
            <result column="dept_code"    property="deptCode"/>
            <result column="dept_name"    property="deptName"/>
            <result column="post_id"      property="postId"/>
            <result column="post_code"    property="postCode"/>
            <result column="post_name"    property="postName"/>
            <result column="is_default"   property="isDefault"/>
            <result column="is_leader"    property="isLeader"/>
        </collection>
        <collection property="parentIds" javaType="list" ofType="Long">
            <result column="p_id"/>
        </collection>
        <collection property="roleIds" javaType="list" ofType="Long">
            <result column="role_id"/>
        </collection>
        <collection property="deptPostIds" javaType="list" ofType="String">
            <result column="dept_post_id"/>
        </collection>
    </resultMap>

    <resultMap id="deptUsersMap" type="com.cowave.sys.admin.api.entity.TreeChildren">
        <result column="dept_id"     property="pid"/>
        <collection property="children" javaType="list" ofType="cn.hutool.core.lang.tree.Tree">
            <result column="user_id"     property="id"/>
            <result column="user_name"   property="label"/>
        </collection>
    </resultMap>

    <select id="deptUserOptions" resultMap="deptUsersMap">
        select d.dept_id, u.user_id, u.user_name
        from sys_dept d
        left join sys_user_dept ud on d.dept_id = ud.dept_id
        left join sys_user u on ud.user_id = u.user_id
    </select>

    <select id="queryByAccount" resultMap="userMap">
        select
        u.user_passwd userPasswd,
        d.dept_id, d.dept_code, d.dept_name, ud.is_default, ud.is_leader,
        p.post_id, p.post_code, p.post_name, ud.dept_id || '-' || ud.post_id dept_post_id,
        r.role_id, r.role_code, r.role_name,
        t.tree_type, pu.user_id p_id, pu.user_code p_code, pu.user_name p_name,
        <include refid="userField"/>
        from sys_user u
        left join sys_user_dept ud on u.user_id = ud.user_id
        left join sys_dept d on ud.dept_id = d.dept_id
        left join sys_post p on ud.post_id = p.post_id
        left join sys_user_role ur on u.user_id = ur.user_id
        left join sys_role r on ur.role_id = r.role_id
        left join sys_user_tree t on u.user_id = t.user_id and t.parent_id > 0
        left join sys_user pu on t.parent_id = pu.user_id
        where u.user_account = #{userAccount}
    </select>

    <select id="info" resultMap="userMap">
        select
        d.dept_id, d.dept_code, d.dept_name, ud.is_default, ud.is_leader,
        p.post_id, p.post_code, p.post_name, ud.dept_id || '-' || ud.post_id dept_post_id,
        r.role_id, r.role_code, r.role_name,
        t.tree_type, pu.user_id p_id, pu.user_code p_code, pu.user_name p_name,
        <include refid="userField"/>
        from sys_user u
        left join sys_user_dept ud on u.user_id = ud.user_id
        left join sys_dept d on ud.dept_id = d.dept_id
        left join sys_post p on ud.post_id = p.post_id
        left join sys_user_role ur on u.user_id = ur.user_id
        left join sys_role r on ur.role_id = r.role_id
        left join sys_user_tree t on u.user_id = t.user_id and t.parent_id > 0
        left join sys_user pu on t.parent_id = pu.user_id
        where u.user_id = #{userId}
    </select>

    <select id="list" resultMap="userMap">
        select u.*,
        d.dept_id, d.dept_name, ud.is_default, ud.is_leader,
        p.post_id, p.post_name, ud.dept_id || '-' || ud.post_id dept_post_id,
        r.role_id, r.role_code, r.role_name,
        t.tree_type, pu.user_id p_id, pu.user_code p_code, pu.user_name p_name
        from(select
             <include refid="userField"/>
             from sys_user u
             where u.user_id > 1
             <if test="userName != null and userName != ''">
                 and u.user_name like concat('%', #{userName}, '%')
             </if>
             <if test="userPhone != null and userPhone != ''">
                 and u.user_phone like concat('%', #{userPhone}, '%')
             </if>
             <if test="rank != null">
                 and u.rank = #{rank}
             </if>
             <if test="pageSize != null">
                 limit #{pageSize} offset #{offset}
             </if>
        ) u
        left join sys_user_dept ud on u.userId = ud.user_id
        left join sys_dept d on ud.dept_id = d.dept_id
        left join sys_post p on ud.post_id = p.post_id
        left join sys_user_role ur on u.userId = ur.user_id
        left join sys_role r on ur.role_id = r.role_id
        left join sys_user_tree t on u.userId = t.user_id and t.parent_id > 0
        left join sys_user pu on t.parent_id = pu.user_id
    </select>

    <select id="count" resultType="java.lang.Integer">
        select count(1)
        from sys_user u
        where u.user_id > 1
        <if test="userName != null and userName != ''">
            and u.user_name like concat('%', #{userName}, '%')
        </if>
        <if test="userPhone != null and userPhone != ''">
            and u.user_phone like concat('%', #{userPhone}, '%')
        </if>
        <if test="rank != null">
            and u.rank = #{rank}
        </if>
        <if test="beginTime != null">
            <![CDATA[
                and u.login_time >= #{beginTime}
            ]]>
        </if>
        <if test="endTime != null">
            <![CDATA[
                and u.login_time <= #{endTime}
            ]]>
        </if>
    </select>

    <select id="listWithDept" resultMap="userMap">
        select u.*,
        d.dept_id, d.dept_name, ud.is_default, ud.is_leader,
        p.post_id, p.post_name, ud.dept_id || '-' || ud.post_id dept_post_id,
        r.role_id, r.role_code, r.role_name,
        t.tree_type, pu.user_id p_id, pu.user_code p_code, pu.user_name p_name
        from(with d as(with recursive tree (dept_id, parent_id) as
             (select t1.dept_id, t1.parent_id from sys_dept_tree t1 where dept_id = #{deptId} union
             select t2.dept_id, t2.parent_id from sys_dept_tree t2 join tree on t2.parent_id = tree.dept_id)
             select tree.dept_id, dept.dept_name from tree JOIN sys_dept dept on tree.dept_id = dept.dept_id)
             select distinct on(u.user_id)
             <include refid="userField"/>
             from d
             join sys_user_dept ud on d.dept_id = ud.dept_id
             join sys_user u on ud.user_id = u.user_id
             where u.user_id > 1
             <if test="userName != null and userName != ''">
                 and u.user_name like concat('%', #{userName}, '%')
             </if>
             <if test="userPhone != null and userPhone != ''">
                 and u.user_phone like concat('%', #{userPhone}, '%')
             </if>
             <if test="rank != null">
                 and u.rank = #{rank}
             </if>
             <if test="beginTime != null">
                 <![CDATA[
                     and u.login_time >= #{beginTime}
                 ]]>
             </if>
             <if test="endTime != null">
                 <![CDATA[
                     and u.login_time <= #{endTime}
                  ]]>
             </if>
             <if test="pageSize != null">
                 limit #{pageSize} offset #{offset}
             </if>
        ) u
        left join sys_user_dept ud on u.userId = ud.user_id
        left join sys_dept d on ud.dept_id = d.dept_id
        left join sys_post p on ud.post_id = p.post_id
        left join sys_user_role ur on u.userId = ur.user_id
        left join sys_role r on ur.role_id = r.role_id
        left join sys_user_tree t on u.userId = t.user_id and t.parent_id > 0
        left join sys_user pu on t.parent_id = pu.user_id
    </select>

    <select id="countWithDept" resultType="java.lang.Integer">
        with d as(with recursive tree (dept_id, parent_id) as
        (select t1.dept_id, t1.parent_id from sys_dept_tree t1 where dept_id = #{deptId} union
        select t2.dept_id, t2.parent_id from sys_dept_tree t2 join tree on t2.parent_id = tree.dept_id)
        select tree.dept_id, dept.dept_name from tree JOIN sys_dept dept on tree.dept_id = dept.dept_id)
        select count(distinct u.user_id)
        from d
        join sys_user_dept ud on d.dept_id = ud.dept_id
        join sys_user u on ud.user_id = u.user_id
        where u.user_id > 1
        <if test="userName != null and userName != ''">
            and u.user_name like concat('%', #{userName}, '%')
        </if>
        <if test="userPhone != null and userPhone != ''">
            and u.user_phone like concat('%', #{userPhone}, '%')
        </if>
        <if test="rank != null">
            and u.rank = #{rank}
        </if>
        <if test="beginTime != null">
            <![CDATA[
                and u.login_time >= #{beginTime}
            ]]>
        </if>
        <if test="endTime != null">
            <![CDATA[
                and u.login_time <= #{endTime}
            ]]>
        </if>
    </select>

    <update id="changeStatus">
        update sys_user set user_status = #{userStatus},
                            update_user = #{accessUserId}, update_dept = #{accessDeptId}, update_time = #{accessTime}
        where user_id = #{userId}
    </update>

    <update id="changeReadonly">
        update sys_user set read_only = #{readOnly},
                            update_user = #{accessUserId}, update_dept = #{accessDeptId}, update_time = #{accessTime}
        where user_id = #{userId}
    </update>

    <update id="changePasswd">
        update sys_user set user_passwd = #{userPasswd},
                            update_user = #{accessUserId}, update_dept = #{accessDeptId}, update_time = #{accessTime}
        where user_id = #{userId}
    </update>

    <insert id="insert" useGeneratedKeys="true" keyProperty="userId" keyColumn="user_id">
        insert into sys_user(user_code,user_name,user_account,user_passwd,user_sex,user_phone,user_email,
                             user_status, remark, rank,
                             create_user, update_user, create_dept, update_dept, create_time, update_time)
        values (#{userCode},#{userName},#{userAccount},#{userPasswd},#{userSex},#{userPhone},#{userEmail},
                #{userStatus},#{remark},#{rank},
                #{accessUserId},#{accessUserId},#{accessDeptId},#{accessDeptId},#{accessTime},#{accessTime})
        on conflict do nothing
    </insert>

    <insert id="insertUserRoles">
        insert into sys_user_role(user_id, role_id) values
        <foreach collection="list" item="roleId" index="index" separator=",">
            (#{userId}, #{roleId})
        </foreach>
    </insert>

    <insert id="insertUserParents">
        insert into sys_user_tree(user_id, parent_id)values
        <foreach collection="list" item="parentId" index="index" separator=",">
            (#{userId}, #{parentId})
        </foreach>
    </insert>

    <insert id="insertUserDepts">
        insert into sys_user_dept(user_id, dept_id, post_id)values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.userId}, #{item.deptId}, #{item.postId})
        </foreach>
        on conflict(user_id, dept_id, post_id) do nothing
    </insert>

    <insert id="batchInsert">
        insert into sys_user(user_code,user_name,user_account,user_passwd,user_sex,user_phone,user_email,
                             user_status, remark,
                             create_user, update_user, create_dept, update_dept, create_time, update_time) values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.userCode},#{item.userName},#{item.userAccount},#{item.userPasswd},#{item.userSex},#{item.userPhone},#{item.userEmail},
             #{item.userStatus},#{item.remark},
             #{item.accessUserId},#{item.accessUserId},#{item.accessDeptId},#{item.accessDeptId},#{item.accessTime},#{item.accessTime})
        </foreach>
        <if test="overwrite == false">
            on conflict do nothing
        </if>
        <if test="overwrite == true">
            on conflict do update set
            user_name   = excluded.user_name,
            user_sex    = excluded.user_sex,
            user_phone  = excluded.user_phone,
            user_email  = excluded.user_email,
            user_status = excluded.user_status,
            remark      = excluded.remark,
            update_user = excluded.update_user,
            update_dept = excluded.update_dept,
            update_time = excluded.update_time
        </if>
    </insert>

    <select id="childIds" resultType="java.lang.Long">
        with recursive tree (user_id, parent_id) as
            (select t1.user_id, t1.parent_id from sys_user_tree t1 where user_id = #{userId} union
            select t2.user_id, t2.parent_id from sys_user_tree t2 join tree on t2.parent_id = tree.user_id)
        select distinct tree.user_id from tree JOIN sys_user u on tree.user_id = u.user_id
    </select>

    <delete id="delete">
        delete from sys_user where user_id = #{userId}
    </delete>

    <delete id="deleteUserRoles">
        delete from sys_user_role where user_id = #{userId}
    </delete>

    <delete id="deleteUserDepts">
        delete from sys_user_dept where user_id = #{userId}
    </delete>

    <delete id="deleteUserParents">
        delete from sys_user_tree where user_id = #{userId}
    </delete>

    <delete id="deleteUserChilds">
        delete from sys_user_tree where parent_id = #{userId}
    </delete>

    <select id="countAccounts" resultType="java.lang.Integer">
        select count(1) from sys_user where user_account = #{userAccount} and user_id != #{userId}
    </select>

    <update id="update">
        update sys_user set
               user_name    = #{userName},
               user_account = #{userAccount},
               user_sex    = #{userSex},
               user_phone  = #{userPhone},
               user_email  = #{userEmail},
               rank        = #{rank},
               remark      = #{remark},
               update_user = #{accessUserId},
               update_dept = #{accessDeptId},
               update_time = #{accessTime}
        where user_id = #{userId}
    </update>

    <select id="permitKeys" resultType="java.lang.String">
        select distinct m.menu_permit
        from sys_user_role u, sys_role r, sys_role_menu rm, sys_menu m
        where u.role_id = r.role_id and r.role_id = rm.role_id and rm.menu_id = m.menu_id
          and m.menu_status = 1
          and m.menu_permit is not null
          and (u.user_id = #{userId} or m.is_protected = 0)
    </select>

    <select id="listTree" resultType="com.cowave.sys.admin.api.entity.TreeNode">
        select t.user_id   id,
               t.parent_id pid,
               u.user_name as label,
               d.dict_value || '/'  || d.dict_label as content
        from sys_user_tree t
        left join sys_user u ON t.user_id = u.user_id
        left join sys_dict d on d.parent_code = 'post_level' and u.rank = d.dict_value
        order by t.parent_id, t.user_id
    </select>

    <select id="queryAccountById" resultType="java.lang.String">
        select user_account from sys_user where user_id = #{userId}
    </select>

    <select id="queryNameById" resultType="java.lang.String">
        select user_name from sys_user where user_id = #{userId}
    </select>

    <select id="leaders" resultType="com.cowave.sys.model.admin.SysUser">
        select u.user_id userId, u.user_name userName
        from sys_user_dept ud
        inner join (select dept_id from sys_user_dept where user_id = #{userId} and is_default = 1) as d on ud.dept_id = d.dept_id
        inner join sys_user u on ud.user_id = u.user_id
        where ud.is_leader = 1
    </select>


</mapper>
