<?xml version="1.0" encoding="UTF-8" ?>
<!--

    Copyright (c) 2017ï½ž2099 Cowave All Rights Reserved.

    For licensing information, please contact: https://www.cowave.com.

    This code is proprietary and confidential.
    Unauthorized copying of this file, via any medium is strictly prohibited.

-->
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cowave.sys.admin.api.mapper.ProfileMapper">

    <resultMap id="profileMap" type="com.cowave.sys.admin.api.entity.UserProfile">
        <result column="user_id"       property="userId"/>
        <result column="user_type"     property="userType"/>
        <result column="user_account"  property="userAccount"/>
        <result column="user_name"     property="userName"/>
        <result column="user_email"    property="userEmail"/>
        <result column="user_phone"    property="userPhone"/>
        <result column="user_sex"      property="userSex"/>
        <result column="create_time"   property="createTime"/>
        <result column="isOAuth"       property="isoauth"/>
        <collection property="roles" javaType="list" ofType="java.lang.String">
            <result column="role_name"/>
        </collection>
        <collection property="depts" javaType="list" ofType="java.lang.String">
            <result column="deptName"/>
        </collection>
        <collection property="parents" javaType="list" ofType="java.lang.String">
            <result column="parentName"/>
        </collection>
    </resultMap>

    <resultMap id="oauthMap" type="com.cowave.sys.admin.api.entity.UserProfile">
        <result column="user_id"       property="userId"/>
        <result column="user_account"  property="userAccount"/>
        <result column="user_name"     property="userName"/>
        <result column="user_email"    property="userEmail"/>
        <result column="user_phone"    property="userPhone"/>
        <result column="user_sex"      property="userSex"/>
        <result column="create_time"   property="createTime"/>
        <result column="isOAuth"       property="isoauth"/>
        <collection property="roles" javaType="list" ofType="java.lang.String">
            <result column="role_name"/>
        </collection>
        <collection property="depts" javaType="list" ofType="java.lang.String">
            <result column="deptName"/>
        </collection>
    </resultMap>

    <insert id="register" useGeneratedKeys="true" keyProperty="userId" keyColumn="user_id">
        insert into sys_user(user_code, user_name, user_account, user_passwd, user_email, user_status)
        values(#{userCode}, #{userName}, #{userAccount}, #{userPasswd}, #{userEmail}, 1)
    </insert>

    <insert id="initRole">
        insert into sys_user_role(user_id, role_id)
        select #{userId}, role_id from sys_role where role_code = 'common'
    </insert>

    <insert id="initHistoryNotice">
        insert into sys_notice_read(notice_id, user_id)
        select notice_id, #{userId} from sys_notice where notice_status = 1 and goals_all = 1
        on conflict(user_id, notice_id) do nothing
    </insert>

    <update id="updateNoticeStat">
        update sys_notice set stat_total = stat_total + 1
        where notice_status = 1 and goals_all = 1
    </update>

    <select id="info" resultMap="profileMap">
        select u.user_id, u.user_type, u.user_account, u.user_name, u.user_email, u.user_phone, u.user_sex, u.create_time,
               r.role_name,
               d.dept_name || '/' ||p.post_name  deptName,
               pu.user_name parentName,
               0 as isOAuth
        from sys_user u
        left join sys_user_role ur on u.user_id = ur.user_id
        left join sys_role r on ur.role_id = r.role_id
        left join sys_user_dept ud on u.user_id = ud.user_id
        left join sys_dept d on ud.dept_id = d.dept_id
        left join sys_post p on ud.post_id = p.post_id
        left join sys_user_tree t on u.user_id = t.user_id
        left join sys_user pu on t.parent_id = pu.user_id
        where u.user_id = #{userId}
    </select>

    <select id="oauthInfo" resultMap="oauthMap">
        select u.id user_id, u.user_account, u.user_name, u.user_email, u.user_dept deptName,
               2 as user_sex, 1 as isOAuth,
               r.role_name
        from oauth_user u, sys_role r
        where u.id = #{userId} and u.user_role = r.role_id
    </select>

    <update id="edit">
        update sys_user set
            user_name   = #{userName},
            user_phone  = #{userPhone},
            user_email  = #{userEmail},
            user_sex    = #{userSex},
            update_user = #{userId},
            update_time = #{createTime}
        where user_id = #{userId}
    </update>

    <update id="resetPasswd">
        update sys_user set user_passwd = #{passwd} where user_id = #{userId}
    </update>

    <select id="queryPasswd" resultType="java.lang.String">
        select user_passwd from sys_user where user_id = #{userId}
    </select>
</mapper>

