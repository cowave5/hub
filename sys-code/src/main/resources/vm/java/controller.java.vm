package ${package}.api.controller;

#if($excelModel == 1)
import java.io.IOException;
import java.util.List;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import javax.servlet.http.HttpServletResponse;
#end
import org.springframework.feign.codec.Response;
import org.springframework.web.bind.annotation.*;
import org.springframework.validation.annotation.Validated;
#if($authPrefix != $null)
import org.springframework.security.access.prepost.PreAuthorize;
#end
#if($excelModel == 1)
import com.github.pagehelper.PageHelper;
import com.alibaba.excel.EasyExcel;
import com.cowave.commons.framework.support.excel.CellWidthHandler;
#end

import lombok.RequiredArgsConstructor;
#if($logModel == 1)
import com.cowave.commons.framework.helper.operation.Operation;
import com.cowave.commons.framework.helper.operation.Operation.Content;
#end
import ${package}.api.entity.${className};
import ${package}.api.service.${className}Service;

/**
 * ${classComment}
 *
 * @author ${commentAuthor}
 * @date ${commentDate}
 */
@Validated
@RequiredArgsConstructor
@RestController
@RequestMapping("${apiContext}")
public class ${className}Controller {

    private final ${className}Service ${instanceName}Service;

    /**
     * 列表
     */
    #if($authPrefix != $null)
    @PreAuthorize("@permit.hasPermit('${authPrefix}:list')")
    #end
    @PostMapping("/list")
    public Response<Response.Page<${className}>> list(@RequestBody ${className} ${instanceName}) {
        return Response.page(${instanceName}Service.list(${instanceName}));
    }

    /**
     * 详情
     */
    #if($authPrefix != $null)
    @PreAuthorize("@permit.hasPermit('${authPrefix}:info')")
    #end
    @GetMapping(value = "info/{${pk.fieldName}}")
    public Response<${className}> info(@PathVariable("${pk.fieldName}") ${pk.fieldTypeName} ${pk.fieldName}) {
        return Response.success(${instanceName}Service.info(${pk.fieldName}));
    }

    /**
     * 新增
     */
    #if($logModel == 1)
    #if($logField != $null)
    @Operation(type = "${logType}", action = "add", desc = "新增${modelName}：#{${instanceName}.${logField}}", content = Content.REQ)
    #else
    @Operation(type = "${logType}", action = "add", desc = "新增${modelName}", content = Content.REQ)
    #end
    #end
    #if($authPrefix != $null)
    @PreAuthorize("@permit.hasPermit('${authPrefix}:add')")
    #end
    @PostMapping("/add")
    public Response<Void> add(@Validated @RequestBody ${className} ${instanceName}) {
        ${instanceName}Service.add(${instanceName});
        return Response.success();
    }

    /**
     * 修改
     */
    #if($logModel == 1)
    #if($logField != $null)
    @Operation(type = "${logType}", action = "edit", desc = "修改${modelName}：#{resp.${logField}}", content = Content.ALL)
    #else
    @Operation(type = "${logType}", action = "edit", desc = "修改${modelName}", content = Content.ALL)
    #end
    #if($authPrefix != $null)
    @PreAuthorize("@permit.hasPermit('${authPrefix}:edit')")
    #end
    @PostMapping("/edit")
    public Response<${className}> edit(@Validated @RequestBody ${className} ${instanceName}) {
        return Response.success(${instanceName}Service.edit(${instanceName}));
    }
    #else
    #if($authPrefix != $null)
    @PreAuthorize("@permit.hasPermit('${authPrefix}:edit')")
    #end
    @PostMapping("/edit")
    public Response<Void> edit(@Validated @RequestBody ${className} ${instanceName}) {
        ${instanceName}Service.edit(${instanceName});
        return Response.success();
    }
    #end

    /**
     * 删除
     */
    #if($logModel == 1)
    @Operation(type = "${logType}", action = "delete", desc = "删除${modelName}", content = Content.RESP)
    #if($authPrefix != $null)
    @PreAuthorize("@permit.hasPermit('${authPrefix}:delete')")
    #end
    @GetMapping("/delete/{${pk.fieldName}s}")
    public Response<List<${className}>> delete(@PathVariable ${pk.fieldTypeName}[] ${pk.fieldName}s) {
        return Response.success(${instanceName}Service.delete(${pk.fieldName}s));
    }
    #else
    #if($authPrefix != $null)
    @PreAuthorize("@permit.hasPermit('${authPrefix}:delete')")
    #end
    @GetMapping("/delete/{${pk.fieldName}s}")
    public Response<Void> delete(@PathVariable ${pk.fieldTypeName}[] ${pk.fieldName}s) {
        ${instanceName}Service.delete(${pk.fieldName}s);
        return Response.success();
    }
    #end

    #if($excelModel == 1)
    /**
     * 导出
     */
    #if($authPrefix != $null)
    @PreAuthorize("@permit.hasPermit('${authPrefix}:export')")
    #end
    @RequestMapping("/export")
    public void export(HttpServletResponse response, ${className} ${instanceName}) throws IOException{
        PageHelper.clearPage();
        List<${className}> list = ${instanceName}Service.list(${instanceName});
        String fileName = URLEncoder.encode("${modelName}", StandardCharsets.UTF_8).replace("\\+", "%20");
        response.setHeader("Content-disposition", "attachment;filename*=utf-8''" + fileName + ".xlsx");
        response.setCharacterEncoding("utf-8");
        response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        EasyExcel.write(response.getOutputStream(), ${className}.class)
                .sheet("${modelName}").registerWriteHandler(new CellWidthHandler()).doWrite(list);
    }
    #end
}
