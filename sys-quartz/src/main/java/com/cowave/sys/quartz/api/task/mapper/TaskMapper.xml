<?xml version="1.0" encoding="UTF-8" ?>
<!--

    Copyright (c) 2017ï½ž2099 Cowave All Rights Reserved.

    For licensing information, please contact: https://www.cowave.com.

    This code is proprietary and confidential.
    Unauthorized copying of this file, via any medium is strictly prohibited.

-->
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cowave.sys.quartz.api.task.mapper.TaskMapper">
	<resultMap type="com.cowave.sys.quartz.api.task.entity.QuartzTask" id="taskMap">
		<id     property="id"             column="id"           />
		<result property="taskName"       column="task_name"    />
		<result property="taskGroup"      column="task_group"   />
		<result property="invokeTarget"   column="invoke_target"/>
		<result property="cron"           column="cron"         />
		<result property="status"         column="status"       />
		<result property="policy"         column="policy"       />
		<result property="priority"       column="priority"     />
		<result property="concurrent"     column="concurrent"   />
		<result property="beginTime"      column="begin_time"   />
		<result property="endTime"        column="end_time"     />
		<result property="times"          column="times"        />
		<result property="remark"         column="remark"       />
		<result property="createUser"     column="create_user"  />
		<result property="createDept"     column="create_dept"  />
		<result property="createTime"     column="create_time"  />
		<result property="updateUser"     column="update_user"  />
		<result property="updateDept"     column="update_dept"  />
		<result property="updateTime"     column="update_time"  />
	</resultMap>

	<sql id="taskField">
        t.id, t.task_name, t.task_group, t.invoke_target, t.cron, t.status, t.policy, t.priority, t.concurrent,
        t.remark, t.create_user, t.create_dept, t.create_time, t.update_user, t.update_dept, t.update_time,
        t.begin_time, t.end_time, t.times
    </sql>

	<select id="list" resultType="com.cowave.sys.quartz.api.task.entity.QuartzTask">
		select q.prev_fire_time timePrev, q.next_fire_time timeNext,
		       t.id, t.task_name taskName, t.task_group taskGroup, t.policy, t.priority, t.status, t.times,
		       t.cron, t.invoke_target invokeTarget, t.begin_time beginTime, t.end_time endTime
		from quartz_task t
		left join qrtz_triggers q on t.task_name = q.job_name and t.task_group = q.job_group
		<where>
			<if test="taskName != null and taskName != ''">
				AND t.task_name like concat('%', #{taskName}, '%')
			</if>
			<if test="taskGroup != null and taskGroup != ''">
				AND t.task_group = #{taskGroup}
			</if>
		</where>
		order by t.id
	</select>

	<select id="info" resultMap="taskMap">
		select
		<include refid="taskField"/>
		from quartz_task t
		where id = #{id}
	</select>

	<update id="increase">
		update quartz_task set times = times + 1 where id = #{id}
	</update>

	<update id="changeStatus">
		update quartz_task set status = #{status} where id = #{id}
	</update>

	<insert id="insert" useGeneratedKeys="true" keyProperty="id">
		insert into quartz_task(task_name, task_group, invoke_target, cron, status,
		                        policy, priority, concurrent, begin_time, end_time,
		                        remark, create_user, update_user, create_dept, update_dept, create_time, update_time)
		values(#{taskName}, #{taskGroup}, #{invokeTarget}, #{cron}, #{status},
		       #{policy}, #{priority}, #{concurrent}, #{beginTime}, #{endTime},
		       #{remark}, #{accessUserId},#{accessUserId},#{accessDeptId},#{accessDeptId},#{accessTime},#{accessTime})
	</insert>

	<update id="update">
		update quartz_task set task_name     = #{taskName},
		                   task_group    = #{taskGroup},
		                   invoke_target = #{invokeTarget},
		                   cron     = #{cron},
		                   policy   = #{policy},
		                   priority = #{priority},
		                   concurrent = #{concurrent},
		                   begin_time = #{beginTime},
		                   end_time   = #{endTime},
		                   update_user = #{accessUserId},
		                   update_dept = #{accessDeptId},
		                   update_time = #{accessTime}
		where id = #{id}
	</update>

	<delete id="delete">
 		delete from quartz_task where id = #{id}
 	</delete>
</mapper>
